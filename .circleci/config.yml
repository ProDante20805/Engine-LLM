version: 2.1
orbs:
  python: circleci/python@2.1.1

workflows:
  ci:
    jobs:
      - run_unit_tests_python_client
      - run_unit_tests_server
      - integration_tests
      - build_image
      - build_docs
      - deploy_docs:
          filters:
            branches:
              only:
                - main

jobs:
  run_unit_tests_python_client:
    docker:
      - image: python:3.8-bookworm
    resource_class: small
    parallelism: 1
    steps:
      - checkout # checkout source code to working directory
      - environment_setup
      - install_client
      - run:
          name: python3 Version
          command: | # Make sure that the workflow is working
            python3 --version
      - run_unit_tests_python_client
  run_unit_tests_server:
    docker:
      - image: python:3.8-bookworm
        environment:
          ML_INFRA_DATABASE_URL: postgresql://postgres@localhost/circle_test
      - image: circleci/postgres:12.9-postgis-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
    resource_class: small
    parallelism: 1
    steps:
      - checkout # checkout source code to working directory
      - environment_setup
      - install_server
      - run:
          name: python3 Version
          command: | # Make sure that the workflow is working
            python3 --version
      - run_unit_tests_server
  build_docs:
    docker:
      - image: python:3.8-bookworm
    resource_class: small
    parallelism: 1
    steps:
      - checkout # checkout source code to working directory
      - environment_setup
      - install_client
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements-docs.txt
      - run:
          name: Build Docs
          command: |
            mkdocs build --strict
  deploy_docs:
    docker:
      - image: python:3.8-bookworm
    resource_class: small
    parallelism: 1
    steps:
      - add_ssh_keys:  # gives write access to CircleCI worker
          fingerprints:
            - "76:0c:1b:9e:e3:6a:c3:5c:6f:24:91:ef:7c:54:d2:7a"
      - checkout # checkout source code to working directory
      - environment_setup
      - install_client
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements-docs.txt
      - run:
          name: Deploy Docs
          command: |
            mkdocs gh-deploy
  build_image:
    executor: ubuntu-large
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: |
            docker build . -f model-engine/Dockerfile -t model-engine:$CIRCLE_SHA1
  integration_tests:
    executor: ubuntu-large
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: |
            docker build . -f model-engine/Dockerfile -t model-engine:$CIRCLE_SHA1
      - run:
          name: Install minikube
          command: |
            cd $HOME
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
            sudo dpkg -i minikube_latest_amd64.deb
            minikube start --vm-driver=docker --kubernetes-version=v1.23.0 --memory=49152 --cpus=14
      - run:
          name: Install kubectl, helm
          command: |
            cd $HOME/bin
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            curl -LO "https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl"
            chmod +x kubectl
      - run:
          name: Install helm chart dependencies (Redis, Postgres, Istio)
          command: |
            sudo apt-get update && sudo apt-get install -y expect
            pushd $HOME/project/.circleci/resources
            kubectl apply -f redis-k8s.yaml
            kubectl apply -f postgres-k8s.yaml
            kubectl create secret generic model-engine-postgres-credentials --from-literal=database_url=postgresql://postgres:circle_test@postgres.default:5432/circle_test
            export ISTIO_VERSION=1.15.0
            popd
            curl -L https://istio.io/downloadIstio | TARGET_ARCH=x86_64 sh -
            install istio-${ISTIO_VERSION}/bin/istioctl $HOME/bin
            $HOME/bin/istioctl install --set profile=demo -y
            kubectl create namespace model-engine
            kubectl create configmap default-config --from-literal=config="$(cat $HOME/project/.circleci/resources/.minikube-config-map | envsubst)"
            kubectl create configmap default-config --namespace model-engine --from-literal=config="$(cat $HOME/project/.circleci/resources/.minikube-config-map | envsubst)"
            cat $HOME/project/.circleci/resources/.minikube-registry-creds | envsubst | expect
            minikube addons enable registry-creds
      - run:
          name: Pre-load model-engine image to minikube
          command: |
            minikube --logtostderr -v 1 image load model-engine:$CIRCLE_SHA1
      - run:
          name: Install helm chart
          command: |
            pushd $HOME/project/charts
            cat llm-engine/values_circleci.yaml | envsubst > llm-engine/values_circleci_subst.yaml
            helm install llm-engine llm-engine --values llm-engine/values_circleci_subst.yaml --set tag=$CIRCLE_SHA1 --atomic --debug

executors:
  ubuntu-large:
    machine:
      image: "ubuntu-2004:202201-02"
    resource_class: 2xlarge

commands:
  environment_setup:
    description: Basic Environment setup
    steps:
      - run:
          name: Install Basic Environment Dependencies
          command: | # install dependencies
            apt-get update
            apt-get -y install curl
            pip install --upgrade pip
            pip install -r $HOME/project/requirements-dev.txt
  install_server:
    description: Installs LLM Engine server
    steps:
     - python/install-packages:
         pkg-manager: pip
         app-dir: model-engine
     - python/install-packages:
         pkg-manager: pip
         app-dir: model-engine
         pip-dependency-file: requirements-test.txt
     - python/install-packages:
         pkg-manager: pip
         app-dir: model-engine
         pip-dependency-file: requirements_override.txt
     - run:
         name: Install Server
         command: |
           pushd model-engine
           pip install -e .
           popd
  install_client:
    description: Install LLM Engine client
    steps:
      - run:
          name: Install LLM Engine client
          command: |
            pip install -e $HOME/project/clients/python
  run_unit_tests_python_client:
    description: Unit tests of the python client
    steps:
      - run:
          name: Type Check
          command: |
            pushd clients/python
            mypy . --install-types --non-interactive
            popd
  run_unit_tests_server:
    description: Unit tests of the server
    steps:
      - run:
          name: Black Formatting Check # Only validation, without re-formatting
          command: |
            black --check --config .black.toml .
      - run:
          name: Isort Formatting Check # Only validation, without re-formatting
          command: |
            isort . --check-only --verbose
      - run:
          name: Ruff Lint Check
          command: |
            ruff .
      - run:
          name: Type Check
          command: |
            pushd model-engine
            mypy . --install-types --non-interactive
            popd
      - run:
          name: Unit Tests
          command: |
            pushd model-engine
            GIT_TAG=$(git rev-parse HEAD) WORKSPACE=.. pytest
            popd
